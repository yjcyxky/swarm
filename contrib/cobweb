#!/bin/bash
# -----------------------------------------------------------
#  Copyright (C) 2017 Nordata.
#  Website: nordata.com.cn
#
#  Swarm platform is developed by the Nordata company.
#  See the license for more details.
#  Author: Jingcheng Yang <yjcyxky@163.com>

# 常用变量定义
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color
ERROR=false

# 函数定义
install_software() {
	OUTPUT_JSON=`conda create --json -q -n ${software_name} ${software}`
	SUCCESS=`echo $OUTPUT_JSON | jq '.success'`
	export ERROR_MSG=`echo $OUTPUT_JSON | jq '.exception_name'`
	if [ "$SUCCESS" != 'true' ];then
		export ERROR=true
	else
		export ERROR=false
	fi
}

search_software() {
	OUTPUT_JSON=`conda search ${software_name} --json`
	ERROR=`echo $OUTPUT_JSON | jq -r 'has("error")'`
    if [ "$ERROR" == 'true' ];then
    	export ERROR=true
		export ERROR_MSG=`echo $OUTPUT_JSON | jq '.exception_name'`
	else
		export ERROR=false
		export SUCCESS_MSG=`echo $OUTPUT_JSON | jq -r '.[] | .[] | .name + "\t"  + .version'`
	fi
}

gen_conda_modulefile() {
	cat <<- EOF > /opt/local/share/modulefiles/${software_name}
#%Module1.0
module-whatis ""
prepend-path PATH /opt/local/cobweb/envs/${software_name}/bin
prepend-path LD_LIBRARY_PATH /opt/local/cobweb/envs/${software_name}/lib
prepend-path MANPATH /opt/local/cobweb/envs/${software_name}/man
prepend-path INFOPATH /opt/local/cobweb/envs/${software_name}/info
prepend-path INCLUDEPATH /opt/local/cobweb/envs/${software_name}/include
EOF

	printf "\n\n${GREEN}安装${software_name}成功.${NC}\n"
	printf "安装路径：${GREEN}/opt/local/cobweb/envs/${software_name}${NC}\n"
	printf "使用方法：${GREEN}module load ${software_name}${NC}\n"
}

gen_modulefile() {
	modulefile=/opt/local/share/modulefiles/${software_name}
	if [ -f "${modulefile}" ];then
		printf "${RED}${modulefile}已经存在...${NC}\n"
		exit 2
	fi
	cat <<- EOF > ${modulefile}
#%Module1.0
module-whatis ""
prepend-path PATH /opt/local/softwares/${software_name}/bin
prepend-path LD_LIBRARY_PATH /opt/local/softwares/${software_name}/lib
prepend-path MANPATH /opt/local/softwares/${software_name}/man
prepend-path INFOPATH /opt/local/softwares/${software_name}/info
prepend-path INCLUDEPATH /opt/local/softwares/${software_name}/include
EOF

	printf "\n\n${GREEN}安装${software_name}成功.${NC}\n"
	printf "安装路径：${GREEN}/opt/local/softwares/${software_name}${NC}\n"
	printf "使用方法：${GREEN}module load ${software_name}${NC}\n"
}

show_error() {
	printf "${RED}安装$software失败，详情请查看出错日志！${NC}\n"
	printf "${RED}$ERROR_MSG${NC}\n"
	exit 1
}

verify_again() {
	# $1: 提示信息
	# $2: 用户选择YES后打印信息
	# $3: 用户选择YES后运行代码/函数
	printf "$1?(yes|no): ${NC}"
	read yesorno
	case "$yesorno" in
		[yY]|[Yy][eE][sS])
			printf "$2\n"
			$3
			;;
		[nN]|[Nn][oO])
			exit 1
			;;
	esac
}

show_help(){
	cat << EOF
usage: $(echo $0) [-m] [-S] [-d] [-s <software>]
	-m 手动安装模式.
	-d 删除指定软件.
	-S 仅搜寻软件包.
	-s 软件名，字符串必须为software_name=version形式.
EOF
}

# 参数匹配
while getopts ":hmdSs:" arg
do
	case "$arg" in
		"m")
			modulefile="yes"
			;;
		"d")
			delete="yes"
			;;
		"S")
			search_mode="yes"
			;;
		"s")
			software="$OPTARG"
			;;
		"?")
			echo "Unkown option: $OPTARG"
			exit 1
			;;
		":")
			echo "No argument value for option $OPTARG"
			;;
		h)
			show_help
			exit 0
			;;
		*)
			echo "Unknown error while processing options"
			show_help
			exit 1
			;;
	esac
done

# 识别是否安装jq
type jq >/dev/null 2>&1 || { echo >&2 "依赖jq，但未安装，请执行'yum install jq'安装此依赖软件."; exit 1; }

# 识别是否安装conda
type conda >/dev/null 2>&1 || { echo >&2 "依赖conda，但未安装，请安装此依赖软件."; exit 1; }

# -s参数不能为空
if [ -z "${software}" ];then
	printf "${RED}必须指定-s参数，且值必须是software_name=version形式.${NC}\n"
	exit 1
fi

# 匹配输入模式
export matched_str=`echo $software | grep -E '[a-zA-Z0-9\-\_\.*]+=[a-zA-Z0-9\-\_\.\*]+'`
software_name=${software//=/-}

if [ "${software_name}" == "${software}" ] || [ -z $matched_str ]; then
	printf "${RED}-s参数的值必须是software_name=version形式.${NC}\n"
	exit 1
fi

# 卸载模式
if [ ! -z "$delete" ] && [ ! -z "$modulefile" ];then
	verify_again "${RED}卸载软件${software_name}" "" ""
	rm -rf /opt/local/softwares/${software_name} 2> /dev/null
	rm -f /opt/local/share/modulefiles/${software_name} 2> /dev/null
	exit 0
elif [ ! -z "$delete" ] && [ -z "$modulefile" ];then
	verify_again "${RED}卸载软件${software_name}" "" ""
	rm -rf /opt/local/cobweb/envs/${software_name} 2> /dev/null
	rm -f /opt/local/share/modulefiles/${software_name} 2> /dev/null
	exit 0
fi

# 搜索模式
if [ ! -z "$search_mode" ];then
	software_name=`echo ${software_name} | sed 's/-\*//g'`
	printf "${GREEN}搜索${software_name}...\n${NC}"
	printf "${YELLOW}"
	search_software
	if $ERROR; then
		printf "${RED}$ERROR_MSG${NC}\n"
	else
		printf "${GREEN}$SUCCESS_MSG${NC}\n"
	fi
	exit 2
fi

# 安装模式
if [ -z "$modulefile" ];then
	software_path=/opt/local/cobweb/envs/${software_name}
	if [ -d "$software_path" ];then
		printf "${RED}$software_path已经存在，请删除后重试...${NC}\n"
		exit 3
	fi

	verify_again "${GREEN}安装软件${software_name}" "${GREEN}正在安装... ...$NC" install_software

	if $ERROR; then
		show_error;
	else
		gen_conda_modulefile;
	fi
elif [ ! -z "$modulefile" ];then
	# 提示用户输入Yes或者No，以便继续运算或者结束
	printf "${GREEN}当前软件为手动安装，安装路径: /opt/local/softwares/${software_name}\n${NC}"
	verify_again "${GREEN}生成modulefile：软件${software_name}" "" gen_modulefile
fi
